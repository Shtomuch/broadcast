// static/chat/js/chat.js
document.addEventListener('DOMContentLoaded', () => {
  /* ---------- DOM ---------- */
  const chatBox   = document.getElementById('chat-box');
  const msgInput  = document.getElementById('msg-input');
  const sendBtn   = document.getElementById('send-btn');
  const fileInput = document.getElementById('file-input');
  const uploadBtn = document.getElementById('upload-btn');
  const csrfToken = document.querySelector('input[name="csrfmiddlewaretoken"]')?.value || '';


  /* ---------- Logger ---------- */
  const log = {
    info : (...args) => console.log('%c[Chat]', 'color:#0d6efd; font-weight:bold;', ...args),
    warn : (...args) => console.warn('[Chat]', ...args),
    error: (...args) => console.error('[Chat]', ...args)
  };

  /* ---------- –£—Ç–∏–ª—ñ—Ç–∏ ---------- */
  function escapeHTML(str) {
    if (str === null || str === undefined) return '';
    return String(str)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
  }

  function setInputsDisabled(disabled) {
    if (msgInput) msgInput.disabled = disabled;
    if (sendBtn) sendBtn.disabled = disabled;
    if (fileInput) fileInput.disabled = disabled;
    if (uploadBtn) uploadBtn.disabled = disabled;
    log.info(`Inputs ${disabled ? 'disabled' : 'enabled'}.`);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  if (!chatBox) {
    log.error('–ö—Ä–∏—Ç–∏—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç #chat-box –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }
  if (msgInput && !sendBtn) log.warn('#send-btn –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.');
  if (fileInput && !uploadBtn) log.warn('#upload-btn –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.');


  /* ---------- WebSocket ---------- */
  const wsScheme  = window.location.protocol === 'https:' ? 'wss' : 'ws';
  const roomSlug  = chatBox.dataset.slug;

  if (!roomSlug) {
    log.error('–ê—Ç—Ä–∏–±—É—Ç data-slug –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏ —á–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ #chat-box!');
    if (msgInput || uploadBtn) setInputsDisabled(true); // –ë–ª–æ–∫—É—î–º–æ –≤–≤—ñ–¥, —è–∫—â–æ –Ω–µ–º–∞—î slug
    return;
  }

  const socketUrl = `${wsScheme}://${window.location.host}/ws/chat/${roomSlug}/`;
  log.info('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket:', socketUrl);
  appendTemporaryMessage('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É...', 'info');

  const socket = new WebSocket(socketUrl);

  socket.onopen = () => {
    removeTemporaryMessage();
    log.info('WebSocket –∑\'—î–¥–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.');
    appendTemporaryMessage('–ó\'—î–¥–Ω–∞–Ω–æ!', 'success', 2000);
    if (msgInput || uploadBtn) setInputsDisabled(false); // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
  };

  socket.onclose = e => {
    removeTemporaryMessage();
    log.warn('WebSocket –∑–∞–∫—Ä–∏—Ç–æ.', `–ö–æ–¥: ${e.code}, –ü—Ä–∏—á–∏–Ω–∞: "${e.reason}", –ß–∏—Å—Ç–æ: ${e.wasClean}`);
    appendTemporaryMessage(`–ó–≤'—è–∑–æ–∫ –≤—Ç—Ä–∞—á–µ–Ω–æ (–∫–æ–¥: ${e.code}). –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.`, 'error');
    if (msgInput || uploadBtn) setInputsDisabled(true);
  };

  socket.onerror = e => {
    removeTemporaryMessage();
    log.error('WebSocket –ø–æ–º–∏–ª–∫–∞:', e);
    appendTemporaryMessage('–ü–æ–º–∏–ª–∫–∞ WebSocket. –î–µ—Ç–∞–ª—ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ.', 'error');
    // setInputsDisabled(true) –≤–∂–µ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –≤ onclose, —è–∫–∏–π –∑–∞–∑–≤–∏—á–∞–π —Å–ª—ñ–¥—É—î –∑–∞ onerror
  };

  socket.onmessage = e => {
    try {
      const data = JSON.parse(e.data);
      log.info('WebSocket: –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data);

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –Ω–∞–¥—Å–∏–ª–∞—î)
      // if (data.type !== 'chat_message') {
      //   log.info('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ—Ç–∏–ø–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data);
      //   return;
      // }

      // –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ—é –≤ HTML
      const author = escapeHTML(data.author || '–ê–Ω–æ–Ω—ñ–º');
      const created = escapeHTML(data.created || ''); // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —á–∞—Å –≤–∂–µ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ
      const content = data.content ? escapeHTML(data.content) : '';

      const messageDiv = document.createElement('div');
      let innerHTML = `<strong>${author}</strong> [${created}]: `;

      if (content) {
        innerHTML += content; // –í–∂–µ –µ–∫—Ä–∞–Ω–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
      }

      if (data.file_url) {
        const filename = escapeHTML(data.filename || '—Ñ–∞–π–ª'); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ data.filename
        innerHTML += ` <a href="${escapeHTML(data.file_url)}" download="${filename}" class="link-secondary ms-1">üìé ${filename}</a>`;
      }

      messageDiv.innerHTML = innerHTML;
      chatBox.appendChild(messageDiv);
      chatBox.scrollTop = chatBox.scrollHeight;

    } catch (err) {
      log.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–±–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', err, '–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', e.data);
    }
  };

  /* ---------- –¢–∏–º—á–∞—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ ---------- */
  let tempMsgIdCounter = 0;
  function appendTemporaryMessage(text, type = 'info', duration = 0) {
    const tempMsgId = `temp-msg-${tempMsgIdCounter++}`;
    const messageDiv = document.createElement('div');
    messageDiv.id = tempMsgId;
    messageDiv.style.padding = '5px';
    messageDiv.style.fontSize = '0.9em';
    messageDiv.style.textAlign = 'center';
    if (type === 'error') {
      messageDiv.style.color = 'red';
      messageDiv.style.fontWeight = 'bold';
    } else if (type === 'success') {
      messageDiv.style.color = 'green';
    } else {
      messageDiv.style.color = '#6c757d'; // Bootstrap secondary
    }
    messageDiv.textContent = text;
    chatBox.appendChild(messageDiv);
    chatBox.scrollTop = chatBox.scrollHeight;

    if (duration > 0) {
      setTimeout(() => removeTemporaryMessage(tempMsgId), duration);
    }
    return tempMsgId;
  }

  function removeTemporaryMessage(id) {
    const query = id ? `#${id}` : '[id^="temp-msg-"]'; // –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∞–±–æ –≤—Å—ñ —Ç–∏–º—á–∞—Å–æ–≤—ñ
    document.querySelectorAll(query).forEach(el => el.remove());
  }


  /* ---------- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç—É ---------- */
  const sendMessage = () => {
    if (!msgInput) return; // –Ø–∫—â–æ –ø–æ–ª—è –≤–≤–æ–¥—É –Ω–µ–º–∞—î
    const text = msgInput.value.trim();
    if (!text) {
      msgInput.focus();
      return;
    }
    if (socket.readyState !== WebSocket.OPEN) {
      log.warn('WebSocket –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.');
      appendTemporaryMessage('–ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏: –∑–≤\'—è–∑–æ–∫ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.', 'error', 3000);
      return;
    }

    const payload = { message: text }; // –ù–∞ —Å–µ—Ä–≤–µ—Ä—ñ –≤–∞—à consumer –º–∞—î —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —Ü–µ JSON –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try {
      socket.send(JSON.stringify(payload));
      log.info('WebSocket: –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', payload);
      msgInput.value = '';
      msgInput.focus();
    } catch (err) {
      log.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ WebSocket –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', err);
      appendTemporaryMessage('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.', 'error', 3000);
    }
  };

  if (sendBtn && msgInput) {
    sendBtn.addEventListener('click', sendMessage);
    msgInput.addEventListener('keydown', e => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
  }


  /* ---------- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ---------- */
  if (uploadBtn && fileInput && csrfToken) {
    uploadBtn.addEventListener('click', async () => {
      if (!fileInput.files || fileInput.files.length === 0) {
        log.info('–§–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.');
        // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ
        appendTemporaryMessage('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª.', 'info', 2000);
        return;
      }
      if (socket.readyState !== WebSocket.OPEN) {
        log.warn('WebSocket –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
        appendTemporaryMessage('–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏: –∑–≤\'—è–∑–æ–∫ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.', 'error', 3000);
        return;
      }

      const fileToUpload = fileInput.files[0];
      const formData = new FormData();
      formData.append('file', fileToUpload); // –ù–∞ —Å–µ—Ä–≤–µ—Ä—ñ –æ—á—ñ–∫—É—î–º–æ –ø–æ–ª–µ 'file'

      setInputsDisabled(true); // –ë–ª–æ–∫—É—î–º–æ —ñ–Ω–ø—É—Ç–∏ –Ω–∞ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      const tempUploadMsgId = appendTemporaryMessage(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${escapeHTML(fileToUpload.name)}...`, 'info');

      try {
        log.info('–†–æ–∑–ø–æ—á–∞—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', fileToUpload.name, `(${Math.round(fileToUpload.size / 1024)}KB)`);
        const response = await fetch(`/chat/r/${roomSlug}/upload/`, { // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ URL –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
          method: 'POST',
          headers: { 'X-CSRFToken': csrfToken },
          body: formData
        });

        removeTemporaryMessage(tempUploadMsgId); // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."

        if (!response.ok) {
          let errorText = `–ü–æ–º–∏–ª–∫–∞ ${response.status} (${response.statusText})`;
          try {
            const errorData = await response.json();
            errorText = errorData.error || errorData.detail || errorText; // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ –∑ JSON
          } catch (e) { /* –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ JSON */ }
          throw new Error(errorText);
        }

        const responseData = await response.json(); // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î JSON
        log.info('–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', responseData);
        // –°–µ—Ä–≤–µ—Ä –º–∞—î –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ WebSocket –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ü–µ–π —Ñ–∞–π–ª,
        // —Ç–æ–º—É –∫–ª—ñ—î–Ω—Ç —Ç—É—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å, –∞ —á–µ–∫–∞—î –Ω–∞ socket.onmessage.
        fileInput.value = ''; // –û—á–∏—â—É—î–º–æ –ø–æ–ª–µ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
        appendTemporaryMessage(`–§–∞–π–ª "${escapeHTML(fileToUpload.name)}" –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.`, 'success', 3000);

      } catch (err) {
        removeTemporaryMessage(tempUploadMsgId);
        log.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', err);
        appendTemporaryMessage(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${err.message}`, 'error', 5000);
      } finally {
        setInputsDisabled(false); // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ —ñ–Ω–ø—É—Ç–∏
      }
    });
  } else if (uploadBtn || fileInput) {
      log.warn('–ï–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É (–∫–Ω–æ–ø–∫–∞, –ø–æ–ª–µ –≤–≤–æ–¥—É –∞–±–æ CSRF —Ç–æ–∫–µ–Ω) –Ω–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ.');
  }

  // –ü–æ—á–∞—Ç–∫–æ–≤–µ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω–ø—É—Ç—ñ–≤, —è–∫—â–æ WebSocket —â–µ –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤—Å—è
  // (onopen —ó—Ö —Ä–æ–∑–±–ª–æ–∫—É—î, —è–∫—â–æ –∑'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ)
  if (socket.readyState !== WebSocket.OPEN) {
    if (msgInput || uploadBtn) setInputsDisabled(true);
  }

});